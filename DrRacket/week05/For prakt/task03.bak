#lang racket
(define (elem-rec-with-if? n xs)
  (if(null? xs)
     #f
     (or (equal? n (car xs)) (elem-rec-with-if? n (cdr xs)))
     )
  )

(define(elem-rec-without-if? n xs)
  (and (not (null? xs)) (or (equal? n (car xs)) (elem-rec-with-if? n (cdr xs)))) 
  )

(define(elem-proc? n xs)
  (list? (member n xs))
  )





; using an if-else statement
(equal? (elem-rec-with-if? 1 '(5 2 1)) #t)
(equal? (elem-rec-with-if? "str" '()) #f)
(equal? (elem-rec-with-if? "str" '("str" "len" "pair")) #t)

; without using an if-else statement
(equal? (elem-rec-without-if? 1 '(5 2 1)) #t)
(equal? (elem-rec-without-if? "str" '()) #f)
(equal? (elem-rec-without-if? "str" '("str" "len" "pair")) #t)

; using a predefined procedure
(equal? (elem-proc? 1 '(5 2 1)) #t)
(equal? (elem-proc? "str" '()) #f)
(equal? (elem-proc? "str" '("str" "len" "pair")) #t)