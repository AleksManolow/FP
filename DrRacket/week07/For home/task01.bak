#lang racket
(define(have-matching-lengths xxs yys)
  (if(= (length xxs) (length yys))
     (cond
    [(null? xxs) #t]
    [(= (length (car xxs)) (length (car yys))) (have-matching-lengths (cdr xxs) (cdr yys))]
    [else #f])
     #f
     )
  )
(equal? (have-matching-lengths '((1 2 3) (4 5 6) (7 8 9)) '((1 4 7) (2 5 8) (3 6 9))) #t)
(equal? (have-matching-lengths '((1 2)) '((1 4 7) (2 5 8))) #f)