#lang racket
(require math/number-theory)

(define(how-del-num x)
  (define(helper curr)
    (cond
      [(zero? curr) 0]
      [(and (divides? curr x) (prime? curr)) (+ 1 (helper (- curr 1)))]
      [else (helper (- curr 1))]
      )
   )
    (helper (- x 1))
  )

(define(list-of-numbers xs k)
  (cond
    [(null? xs) xs]
    [(>= (how-del-num (car xs)) k) (list-of-numbers (cdr xs) k)]
    [else (cons (car xs) (list-of-numbers (cdr xs) k))]
    )
  )

(define(numbers n)
  (Î» (k) (list-of-numbers (range 1 (add1 n)) k )
    )
  )

(equal? ((numbers 10) 1) '(1 2 3 5 7))
(equal? ((numbers 20) 2) '(1 2 3 4 5 7 8 9 11 13 16 17 19))